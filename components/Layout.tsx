import { useCallback, useState, useEffect } from 'react';

import clsx from 'clsx';
import Head from 'next/head';

import Navbar from '@/components/Navbar/Navbar';
import Sidebar from '@/components/Sidebar/Sidebar';
import { setAll, setOne } from '@/store/chatsSlice';
import { useAppDispatch, useAppSelector } from '@/store/hooks';
import { setAllRoles } from '@/store/rolesSlice';
import { Chat, Role, defaultModelParams } from '@/types';
import * as idb from '@/utils/indexedDB';

type Props = { children: React.ReactNode };

export default function Layout({ children }: Props) {
    const dispatch = useAppDispatch();
    // const isSidebarOpen = useAppSelector((state) => state.ui.sidebar);
    // const onClickSidebar = useCallback(() => dispatch(toggleSidebar()), [dispatch]);
    const [isSidebarOpen, setIsSidebarOpen] = useState(true);
    const toggleSidebar = () => {
        setIsSidebarOpen(!isSidebarOpen);
    };

    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const loadRecords = async () => {
            const roles: Role[] = await idb.get('roles');
            if (roles) {
                dispatch(setAllRoles(roles));
            }
            const chats: Chat[] = await idb.get('chats');
            if (chats) {
                dispatch(setAll(chats));
            }
            setIsLoading(false);
        };
        loadRecords();
    }, []);

    return isLoading ? (
        <div className="">loading...</div>
    ) : (
        <>
            <Head>
                <title>cb</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="inset-0 flex h-screen overflow-x-clip">
                <Sidebar isSidebarOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />
                <div className={clsx('relative flex w-full flex-col')}>
                    <Navbar toggleSidebar={toggleSidebar} isSidebarOpen={isSidebarOpen} />
                    {children}
                </div>
                {/* <div
                    className={clsx(
                        'absolute flex h-full w-full flex-grow-0 flex-col items-center justify-between border-2 border-red-600 bg-light-bg transition-all duration-300 dark:bg-dark-bg',
                        { 'ml-64': isSidebarOpen }
                    )}
                >
                    <Navbar toggleSidebar={onClickSidebar} isSidebarOpen={isSidebarOpen} />
                    {children}
                </div> */}
            </div>
        </>
    );
}
