import { useCallback, useState, useEffect } from 'react';

import clsx from 'clsx';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useSelector } from 'react-redux';

import Navbar from '@/components/Navbar/Navbar';
import Sidebar from '@/components/Sidebar/Sidebar';
import useWindowDimensions from '@/hooks/useWindowDimension';
import { RootState } from '@/store';
import { setAll } from '@/store/chatsSlice';
import { useAppDispatch } from '@/store/hooks';
import { setAllRoles } from '@/store/rolesSlice';
import { toggleSidebar } from '@/store/uiSlice';
import { Chat, Role } from '@/types';
import * as idb from '@/utils/indexedDB';

import Alert from './Alert';

type Props = { children: React.ReactNode };

export default function Layout({ children }: Props) {
    const dispatch = useAppDispatch();
    const { query } = useRouter();
    const { width } = useWindowDimensions();
    const sidebarOpen = useSelector((state: RootState) => state.ui.sidebarOpen);

    const handleClickSidebar = useCallback(() => {
        dispatch(toggleSidebar());
    }, []);

    const [isLoading, setIsLoading] = useState(true);
    useEffect(() => {
        if (width && width <= 640 && sidebarOpen) {
            handleClickSidebar();
        }
    }, [query.id]);

    useEffect(() => {
        const loadRecords = async () => {
            const roles: Role[] = await idb.get('roles');
            if (roles) {
                dispatch(setAllRoles(roles));
            }
            const chats: Chat[] = await idb.get('chats');
            if (chats) {
                dispatch(setAll(chats));
            }
            setIsLoading(false);
        };
        loadRecords();
    }, []);

    return isLoading ? (
        <div className="">loading...</div>
    ) : (
        <>
            <Head>
                <title>cb</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="fixed inset-0 flex h-screen">
                <Sidebar sidebarOpen={sidebarOpen} toggleSidebar={handleClickSidebar} />
                <div className={clsx('relative flex w-full basis-full flex-col overflow-hidden')}>
                    <Navbar isSidebarOpen={sidebarOpen} toggleSidebar={handleClickSidebar} />
                    {children}
                </div>
            </div>
            <Alert />
        </>
    );
}
